// Generated by ts-to-zod
import { z } from 'zod'

export const panelMatchSchema = z.union([
  z.object({
    name: z.literal('string'),
  }),
  z.object({
    name: z.literal('boolean'),
  }),
  z.object({
    name: z.literal('Children'),
  }),
  z.object({
    name: z.literal('enum'),
    parameters: z.object({
      values: z.array(z.string()),
    }),
  }),
  z.object({
    name: z.literal('SxProps'),
  }),
])

export const existingAttributeValueSchema = z.union([z.string(), z.boolean()])

const locationSchema = z.object({
  pos: z.number(),
  end: z.number(),
})

export const existingAttributeSchema = z.object({
  name: z.string(),
  value: existingAttributeValueSchema.optional(),
  location: locationSchema,
  panels: z.array(z.string()).optional(),
})
export type existingAttributeSchema = z.infer<typeof existingAttributeSchema>

export const panelAttributeSchema = z.object({
  name: z.string(),
  location: locationSchema.optional(),
  required: z.boolean().optional(),
  panels: z.array(panelMatchSchema),
})
export type panelAttributeSchema = z.infer<typeof panelAttributeSchema>

export const iRangeSchema = z.object({
  startLineNumber: z.number(),
  startColumn: z.number(),
  endLineNumber: z.number(),
  endColumn: z.number(),
})

export const panelsResponseSchema = z.object({
  attributes: z.array(panelAttributeSchema),
  existingAttributes: z.array(existingAttributeSchema),
  location: z.number().optional(),
  fileName: z.string().optional(),
  range: iRangeSchema,
})

export type panelsResponseSchema = z.infer<typeof panelsResponseSchema>
